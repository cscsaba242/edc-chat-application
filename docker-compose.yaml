# Docker Compose configuration for running Chat application using EDC
# This setup includes PostgreSQL, EDC control planes, data planes, backend application and UI for sender and receiver,
# HashiCorp Vault and wallet stub service for operator company(Trusted issuer)

version: "3.8"
services:
  # PostgreSQL database service
  postgres:
    image: postgres:latest
    container_name: postgres_multi_db
    environment:
      # Database credentials and configuration
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      # List of databases to be created. It creates database for both EDCs and backend applications
      POSTGRES_MULTIPLE_DATABASES: sender-edc,receiver-edc,sender-backend,receiver-backend
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
      # Script to create multiple databases
      - ./deployment/env/postgres/create_database.sh:/docker-entrypoint-initdb.d/create_databases.sh
    ports:
      - "5432:5432"
    restart: no
    networks:
      - edc-network

  # Sender Control Plane service
  sender-controlplane:
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.7
    container_name: sender-controlplane
    ports:
      # Expose Control Plane ports
      - "8191:8191"
      - "8192:8192"
      - "8194:8194"
      - "8195:8195"
    volumes:
      # Mount configuration file
      - ./deployment/env/smartsense/edc.properties:/app/configuration.properties
    environment:
      # Specify the configuration file location
      - CONFIGURATION_PROPERTIES_FILE=/app/configuration.properties
    depends_on:
      postgres:
        condition: service_started
      wallet-stub:
        condition: service_healthy
    networks:
      - edc-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://sender-controlplane:8191/api/check/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 30s

  # Sender Data Plane service
  sender-dataplane:
    image: tractusx/edc-dataplane-hashicorp-vault:0.7.7
    container_name: sender-dataplane
    ports:
      # Expose Data Plane port
      - "8196:8193"
    volumes:
      # Mount configuration file
      - ./deployment/env/smartsense/dataplane.properties:/app/configuration.properties
    environment:
      # Specify the configuration file location
      - CONFIGURATION_PROPERTIES_FILE=/app/configuration.properties
    depends_on:
      postgres:
        condition: service_started
      wallet-stub:
        condition: service_healthy
      sender-controlplane:
        condition: service_healthy
    networks:
      - edc-network

  # Receiver Control Plane service
  receiver-controlplane:
    image: tractusx/edc-controlplane-postgresql-hashicorp-vault:0.7.7
    container_name: receiver-controlplane
    ports:
      # Expose Control Plane ports
      - "9191:9191"
      - "9192:9192"
      - "9194:9194"
      - "9195:9195"
    volumes:
      # Mount configuration file
      - ./deployment/env/catena-x/edc.properties:/app/configuration.properties
    environment:
      # Specify the configuration file location
      - CONFIGURATION_PROPERTIES_FILE=/app/configuration.properties
    depends_on:
      postgres:
        condition: service_started
      wallet-stub:
        condition: service_healthy
    networks:
      - edc-network
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://receiver-controlplane:9191/api/check/health || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 30s

  # Receiver Data Plane service
  receiver-dataplane:
    image: tractusx/edc-dataplane-hashicorp-vault:0.7.7
    container_name: receiver-dataplane
    ports:
      # Expose Data Plane port
      - "9196:8196"
    volumes:
      # Mount configuration file
      - ./deployment/env/catena-x/dataplane.properties:/app/configuration.properties
    environment:
      # Specify the configuration file location
      - CONFIGURATION_PROPERTIES_FILE=/app/configuration.properties
    depends_on:
      postgres:
        condition: service_started
      wallet-stub:
        condition: service_started
      receiver-controlplane:
        condition: service_healthy
    networks:
      - edc-network

  # HashiCorp Vault service
  vault:
    container_name: vault
    image: vault:1.13.3
    ports:
      # Expose Vault API port
      - "8200:8200"
    environment:
      # Vault configuration
      VAULT_DEV_ROOT_TOKEN_ID: "root-token"
      VAULT_ADDR: "http://127.0.0.1:8200"
    cap_add:
      - IPC_LOCK
    networks:
      - edc-network

  # Service to prepopulate Vault with initial data
  vault-prepopulate:
    image: alpine/curl
    depends_on:
      - vault
    volumes:
      # Mount script to prepopulate Vault
      - ./deployment/env/vault/prepopulate_vault.sh:/usr/local/bin/prepopulate_vault.sh
    command: [ "sh", "-c", "/usr/local/bin/prepopulate_vault.sh" ]
    networks:
      - edc-network

  # Wallet stub service
  wallet-stub:
    image: tractusx/ssi-dim-wallet-stub:0.0.4
    container_name: wallet-stub
    environment:
      # Wallet configuration
      - SERVER_PORT=80
      - BASE_WALLET_BPN=BPNL0000TRACTUSX
      - DID_HOST=ha3c3xy568h9.share.zrok.io
      - STUB_URL=https://ha3c3xy568h9.share.zrok.io
      - SEED_WALLETS_BPN=BPNL0000TRACTUSX,BPNL00SMARTSENSE,BPNL00000CATENAX
    ports:
      # Expose wallet service port
      - "80:80"
    networks:
      - edc-network
    healthcheck:
      # Health check configuration
      test: curl --fail http://wallet-stub/BPNL0000TRACTUSX/did.json || exit 1
      interval: 40s
      timeout: 30s
      retries: 3
      start_period: 30s

  sender-backend:
    build:
      dockerfile: ./edc-chat-app-backend/Dockerfile
    container_name: sender-backend
    environment:
      - APP_PORT=8080
      - BPN=BPNL00SMARTSENSE
      - DB_HOST=postgres
      - CHAT_DB=sender-backend
      - DB_USER=root
      - DB_PASS=root
      - ASSET_ID=edc-chat-app
      - EDC_URL=http://sender-controlplane:8192
      - APP_HOST_URL=http://sender-backend:8080
    ports:
      - "8182:8080"
    depends_on:
      sender-controlplane:
        condition: service_healthy
    networks:
      - edc-network

  receiver-backend:
    build:
      dockerfile: ./edc-chat-app-backend/Dockerfile
    container_name: receiver-backend
    environment:
      - APP_PORT=8080
      - BPN=BPNL00000CATENAX
      - DB_HOST=postgres
      - CHAT_DB=receiver-backend
      - DB_USER=root
      - DB_PASS=root
      - ASSET_ID=edc-chat-app
      - EDC_URL=http://receiver-controlplane:9192
      - APP_HOST_URL=http://receiver-backend:8080
    depends_on:
      receiver-controlplane:
        condition: service_healthy
    ports:
      - "8181:8080"
    networks:
      - edc-network

  sender-ui:
    build:
      dockerfile: edc-chat-app-ui/Dockerfile-sender
    container_name: sender-ui
    depends_on:
      - sender-backend
    ports:
      - "8180:80"
    networks:
      - edc-network

  receiver-ui:
    build:
      dockerfile: edc-chat-app-ui/Dockerfile-receiver
    container_name: receiver-ui
    depends_on:
      - receiver-backend
    ports:
      - "8280:80"
    networks:
      - edc-network

  sender-flyway:
    image: flyway/flyway:latest
    container_name: sender-flyway
    command: -url=jdbc:postgresql://postgres:5432/sender-edc -schemas=public -user=root -password=root  -connectRetries=10 migrate
    volumes:
      - ./deployment/env/postgres/migration.sql:/flyway/sql/V0_0_1_0__create_tables.sql
    depends_on:
      postgres:
        condition: service_started
    networks:
      - edc-network

  receiver-flyway:
    image: flyway/flyway:latest
    container_name: receiver-flyway
    command: -url=jdbc:postgresql://postgres:5432/receiver-edc -schemas=public -user=root -password=root  -connectRetries=10 migrate
    volumes:
      - ./deployment/env/postgres/migration.sql:/flyway/sql/V0_0_1_0__create_tables.sql
    depends_on:
      postgres:
        condition: service_started
    networks:
      - edc-network

# Define custom network for inter-service communication
networks:
  edc-network:

# Define named volume for persistent PostgreSQL data
volumes:
  postgres_data:
